# set working directory
setwd("C:/Users/uvent/source/repos/hustarAI/r-programming/exercise")
# practice data
dat1<-read.csv(file="data1.csv")
dat2<-read.csv(file="data2.csv")
View(dat1)
View(dat2)
View(dat1)
# data merging
dat12<-merge(dat1, dat2, by="ID")
View(dat12)
# add more data (combine in a row)
dat3<-read.csv(file="data3.csv")
View(dat3)
dat123<-rbind(dat12, dat3)
dat123
# data sorting
dats1<-dat12[order(dat12$age),]
dats1
dats2<-dat12[order(dat12$gender, dat12$age), ]
dats2
dats3<-dat12[order(dat12$game),]
dats3
dats3<-dat12[order(dat123$game),]
dats3
View(dat123)
dats3<-dat123[order(dat123$game),]
dats3
# data subset (selecting data)
#newdat<-dat12[which(dat12$gender=="F" & dat12$age>15),]
newdat<-subset(dat12, dat12$gender=="F" & dat12$age>15)
newdat
# excluding variables
exdat<-dat12[!names(dat12) %in% c("age","gender")]
exdat
hist(dats2$hourwk)
hist(dats2$hourwk, col=coral)
hist(dats2$hourwk, col="coral")
# excluding variables
exdat<-dat12[!names(dat12) %in% c("age","gender")]
exdat
# excluding variables
exdat<-dat12[-names(dat12) %in% c("age","gender")]
# set working directory
setwd("C:/Users/uvent/source/repos/hustarAI/r-programming/exercise")
stud<-read.csv("stud_math.csv")
head(stud)
stud<-read.csv("stud_math.csv")
stud<-read.csv("stud_math.csv")
head(stud)
stud<-read.csv("stud_math.csv")
stud<-read.csv("stud_math.csv")
head(stud)
dim(stud)
str(stud)
stud<-read.csv("stud_math.csv")
head(stud)
dim(stud)
str(stud)
View(stud)
View(stud)
View(stud)
stud<-read.csv("stud_math.csv")
head(stud)
dim(stud)
str(stud)
stud<-read.csv("stud_math.csv")
stud<-read.csv2("stud_math.csv")
head(stud)
dim(stud)
str(stud)
stud2<-read.csv("stud_math.csv", sep=';')
View(stud2)
stud<-read.csv2("stud_math.csv")
head(stud)
dim(stud)
str(stud)
# 1-1 Numeriacl analytics
summary(stud)
stud2<-read.csv("stud_math.csv", sep=';')
str(stud2)
attach(stud)
# 1-1 Numeriacl analytics
summary(stud)
mean(G3)
sd(G3)
sqrt(var(G3))
# creating interested variable list
vars<-c("G1", "G2", "G3")
head(stud[vars])
summary(stud[vars])
# sapply function
sapply(stud[vars], mean)
# descriptive statistics using "psych" package
# install.packages("psych")
library(psych)
# require "psych" for "describe" function
describe(stud[vars])
# categorical data
table(health)
View(stud)
health_freq<-table(health)
names(health_freq) <- c ("very bad", "bad", "average", "good",
"very good")
health_freq
barplot(health_freq, col=3)
# 2*2 contingency table
table(health,studytime)
chisq.test(health,studytime)
str(stud)
school <- as.factor(school)
str(stud)
summary(stud)
attach(stud)
school <- as.factor(school)
summary(stud)
stud$school <- as.factor(stud$school)
summary(stud)
stud[1:2] <- as.factor(stud[1:2])
summary(stud)
stud$school <- as.factor(stud$school)
summary(stud)
View(stud)
stud<-read.csv("stud_math.csv")
stud<-read.csv("stud_math.csv", sep=';')
attach(stud)
stud$school <- as.factor(stud$school)
summary(stud)
# 1. histogram with color and title, legend
par(mfrow=c(2,2))
hist(G1, breaks = 10, col = "lightblue", main="Histogram of Grade 1" )
hist(G2, breaks = 10, col = "green", main="Histogram of Grade 2" )
hist(G3, breaks = 10, col = "coral", main="Histogram of Grade 3" )
# 2. boxplot
par(mfrow=c(1,2))
boxplot(G3~address, boxwex = 0.5, col = c("yellow", "coral"), main="G3 by (Urban, Rural)")
boxplot(G3~traveltime, boxwex = 0.5, col = c("red","orange","yellow","green"), main="G3 by traveltime")
View(stud)
# boxplot
par(mfrow=c(1,2))
# academic achievement by freetime
# 1 - very low to 5 - very high
boxplot(G3~freetime, boxwex = 0.5, col = c("yellow", "green", "blue","grey","red"),main="G3 by freetime")
# academic achievement by studytime
# 1 - <2 hours, 2 - 2 to 5 hours, 3 - 5 to 10 hours, or 4 - >10 hours
boxplot(G3~studytime, boxwex = 0.5, col = c("yellow", "blue","grey","red"), main="G3 by studytime")
View(stud)
# 3. xyplot : lattice package
library(lattice)
xyplot(G3 ~ traveltime | sex , data = stud, pch=16, main = "G3 ~ traveltime | sex ")
# data (G3=0)
s1<-subset(stud, G3==0)
View(s1)
ggplot(data=s1, aes(factor(s1$address)))+geom_bar(aes(fill=factor(s1$sex)), width=.4, colour="black")+ggtitle("G3=0")
ggplot(data=s1, aes(factor(s1$internet)))+geom_bar(aes(fill=factor(s1$sex)), width=.4, colour="black")+ggtitle("G3=0")
# 4. scatterplot : ggplot2 package
library(ggplot2)
ggplot(data=s1, aes(factor(s1$address)))+geom_bar(aes(fill=factor(s1$sex)), width=.4, colour="black")+ggtitle("G3=0")
ggplot(data=s1, aes(factor(s1$internet)))+geom_bar(aes(fill=factor(s1$sex)), width=.4, colour="black")+ggtitle("G3=0")
par(mfrow=c(2, 1))
ggplot(data=s1, aes(factor(s1$address)))+geom_bar(aes(fill=factor(s1$sex)), width=.4, colour="black")+ggtitle("G3=0")
ggplot(data=s1, aes(factor(s1$internet)))+geom_bar(aes(fill=factor(s1$sex)), width=.4, colour="black")+ggtitle("G3=0")
par(mfrow=c(1, 2))
ggplot(data=s1, aes(factor(s1$address)))+geom_bar(aes(fill=factor(s1$sex)), width=.4, colour="black")+ggtitle("G3=0")
ggplot(data=s1, aes(factor(s1$internet)))+geom_bar(aes(fill=factor(s1$sex)), width=.4, colour="black")+ggtitle("G3=0")
ggplot(data=s1, aes(factor(s1$address)))+geom_bar(aes(fill=factor(s1$sex)), width=.4, colour="black")+ggtitle("G3=0")
ggplot(data=s1, aes(factor(s1$internet)))+geom_bar(aes(fill=factor(s1$sex)), width=.4, colour="black")+ggtitle("G3=0")
# boxplot
par(mfrow=c(1,2))
ggplot(data=s1, aes(factor(s1$address)))+geom_bar(aes(fill=factor(s1$sex)), width=.4, colour="black")+ggtitle("G3=0")
ggplot(data=s1, aes(factor(s1$internet)))+geom_bar(aes(fill=factor(s1$sex)), width=.4, colour="black")+ggtitle("G3=0")
# scatterplot for G1 and G3 by sex
ggplot(stud, aes(x=G1, y=G3, color=sex, shape=sex)) +
geom_point(size=2)
# scatterplot for G1 and G3 by sex
ggplot(stud, aes(x=studytime, y=G3, color=sex, shape=sex)) +
geom_point(size=2)
G1
# scatterplot for G1 and G3 by sex
ggplot(stud, aes(x=G1, y=G3, color=sex, shape=sex)) +
geom_point(size=2)
ggplot(stud, aes(x=studytime, y=G3, color=sex, shape=sex)) +
geom_point(size=2)
stud2 <- subset(stud, G3!=0)
View(stud2)
ggplot(stud2, aes(x=studytime, y=G3, color=sex, shape=sex)) +
geom_point(size=2)
ggplot(stud2, aes(x=studytime, y=G3, color=romantic, shape=romantic)) +
geom_point(size=2)
stud2 <- subset(stud2, sex=="M")
stud2 <- subset(stud, G3!=0)
stud2 <- subset(stud, G3!=0)
stud2m <- subset(stud2, sex=="M")
stud2f <- subset(stud2, sex=='F')
ggplot(stud2f, aes(x=studytime, y=G3, color=romantic, shape=romantic)) +
geom_point(size=2)
ggplot(stud2m, aes(x=studytime, y=G3, color=romantic, shape=romantic)) +
geom_point(size=2)
source('C:/Users/uvent/source/repos/hustarAI/r-programming/exercise/lec6_3.R', echo=TRUE)
source('C:/Users/uvent/source/repos/hustarAI/r-programming/exercise/lec6_3.R', echo=TRUE)
source('C:/Users/uvent/source/repos/hustarAI/r-programming/exercise/lec6_3.R', echo=TRUE)
# 5. bar chart : ggplot2 package
# bar chart for romantic by sex
ggplot(data=stud, aes(factor(romantic)))+geom_bar(aes(fill=factor(sex)), width=.4, colour="black")+ ggtitle("Romantic by sex")
# bar chart for internet use by (Urban, Rural)
ggplot(data=stud, aes(factor(internet)))+geom_bar(aes(fill=factor(address)), width=.4, colour="black")+ggtitle("Internet use by (Urban, Rural)")
# 6. pariwise plot
# new variable lists
vars1<-c("G1", "G2", "G3")
# 5. bar chart : ggplot2 package
# bar chart for romantic by sex
ggplot(data=stud, aes(factor(romantic)))+geom_bar(aes(fill=factor(sex)), width=.4, colour="black")+ ggtitle("Romantic by sex")
# 6. pariwise plot
# new variable lists
vars1<-c("G1", "G2", "G3")
# pariwise plot
pairs(stud[vars1], main = "Student Math Data",pch = 21, bg = c ("red","green3"))
# pariwise plot
pairs(stud2[vars1], main = "Student Math Data", pch = 21, bg = c ("red","green3"))
# pariwise plot
pairs(stud[vars1], main = "Student Math Data", pch = 21, bg = c ("red","green3"))
pairs(stud2[vars1], main = "Student Math Data", pch = 21, bg = c ("red","green3")[ unclass(stud$sex) ])
pairs(stud2[vars1], main = "Student Math Data", pch = 21, bg = c ("red","green3")[ unclass(stud$school) ])
# pariwise plot
pairs(stud[vars1], main = "Student Math Data", pch = 21, bg = c ("red","green3")[ unclass(stud$school) ])
View(stud)
summary(stud)
pairs(stud2[vars1], main = "Student Math Data", pch = 21, bg = c ("red","green3", "blue", "yellow")[ unclass(stud$studytime) ])
# pariwise plot
pairs(stud[vars1], main = "Student Math Data", pch = 21, bg = c ("red","green3"))
pairs(stud2[vars1], main = "Student Math Data", pch = 21, bg = c ("red","green3", "blue", "yellow")[ unclass(stud$studytime) ])
pairs(stud[vars1], main = "Student Math Data", pch = 21, bg = c ("red","green3")[ unclass(stud$school) ])
# pariwise plot
pairs(stud[vars1], main = "Student Math Data", pch = 21, bg = c ("red","green3"))
pairs(stud[vars1], main = "Student Math Data", pch = 21, bg = c ("red","green3")[ unclass(stud$school) ])
### student math grade data ####
stud<-read.csv("stud_math.csv", sep=';')
head(stud)
dim(stud)
### student math grade data ####
stud<-read.csv("stud_math.csv", sep=';')
head(stud)
dim(stud)
str(stud)
attach(stud)
# 1. single t-test : to test whether or not mean of G3 is 10
t.test(G3, mu=10)
# 2. two sample t-test
## example 1
# to test whether or not mean of G3 is same between Urban and Rural
t.test(G3~address, data=stud)
boxplot(G3~address, boxwex = 0.5, col = c("yellow", "coral"))
# alternative H : mu(Rural)< mu(Urban)
t.test(G3~address, data=stud, alternative = c("less"))
## example 2
# to test whether or not mean of G3 is equal for activities
t.test(G3~activities, data=stud)
boxplot(G3~activities, boxwex = 0.5, col = c("blue", "red"))
t.test(G3~internet, data=stud)
# wilcox.test(G3, mu=10)
wilcox.test(G3~address)
View(stud)
### student math grade data ####
stud<-read.csv("stud_math.csv", sep=';')
attach(stud)
# boxplot in lec6_3.R
par(mfrow=c(1,2))
boxplot(G3~address, boxwex = 0.5, col = c("yellow", "coral"), main="G3 by (Urban, Rural)")
boxplot(G3~traveltime, boxwex = 0.5, col = c("red","orange","yellow","green"), main="G3 by traveltime")
# 1. ANOVA by address
a1 <- aov(G3~address)
summary(a1)
View(a1)
# 2. ANOVA by traveltime
traveltime<-as.factor(traveltime)
a2 <- aov(G3~traveltime)
summary(a2)
# tapply - give FUN value by address
round(tapply(G3, traveltime, mean),2)
# should be foctor for Tukey's Honest Significant Difference test
TukeyHSD(a2, "traveltime", ordered=TRUE)
plot(TukeyHSD(a2, "traveltime"))
# 4. ANOVA by romantic
a4 <- aov(G3~romantic)
summary(a4)
summary(a4)
t.test(G3~romantic)
View(a4)
# set working directory
setwd("C:/Users/uvent/source/repos/hustarAI/r-programming/exercise")
### student math grade data ####
stud<-read.csv("stud_math.csv")
summary(stud)
stud$Fjob
table(stud$Fjob)
stud$Fjob <- as.factor(stud$Fjob)
attach(stud)
boxplot(G1~Fjob, boxwex=0.5, col=c(1, 2, 3, 4, 5))
par(mfrow=c(1,1))
boxplot(G1~Fjob, boxwex=0.5, col=c(1, 2, 3, 4, 5))
boxplot(G1~Fjob, boxwex=0.5, col=c(6, 2, 3, 4, 5))
a1 <- aov(G1~Fjob)
a1
summary(a1)
plot(TukeyHSD(a1, "Fjob")
TukeyHSD(a1, "Fjob")
TukeyHSD(a1, "Fjob")
plot(TukeyHSD(a1, "Fjob")
plot(TukeyHSD(a1, "Fjob")
plot(TukeyHSD(a1, "Fjob"))
View(stud)
library(ggplot2)
ggplot(stud, aes(x=G1, y=G2))+
geom_point(size=2)
t.test(G1, G2, mu=0, paired=T)
t.test(G1, G2, mu=0)
library(dplyr)
stud_0 <- stud %>%
filter(G1!=0)
stud_0 <- stud %>%
filter(!G1==0)
View(stud_0)
stud_0 <- stud %>%
filter(G2!=0)
t.test(stud_0$G1, stud_0$G2, mu=0, paried=T)
### student math grade data ####
stud<-read.csv("WHR_2019.csv")
# set working directory
setwd("C:/Users/uvent/source/repos/hustarAI/r-programming/project")
### student math grade data ####
stud<-read.csv("WHR_2019.csv")
### student math grade data ####
stud<-read.csv("data1_2019.csv")
stud<-read.csv("data2_2019.csv")
stud<-read.csv("data3_2019.csv")
### student math grade data ####
dat1<-read.csv("data1_2019.csv")
dat2<-read.csv("data2_2019.csv")
dat3<-read.csv("data3_2019.csv")
View(dat1)
View(dat2)
View(dat1)
View(dat2)
View(dat3)
View(dat1)
summary(dat1)
whr<-merge(dat1, dat2, by="Country.or.region")
whr<-rbind(whr, dat3)
summary(whr)
View(whr)
# 1-2
whr<-whr[order(whr$Overall.rank),]
head(whr)
# ②
head(whr[order(whr$GDP.per.capita, whr$Generosity),])
View(whr)
# 1-3
whr100 <- subset(whr$Overall.rank)
# 1-3
whr100 <- subset(whr, whr$Overall.rank>=100)
View(whr100)
# 1-3
whr100 <- subset(whr, whr$Overall.rank<=100)
# 1-4
df_whr <- whr100[1:8]
str(df_whr)
attach(df_whr)
# 2-1
summary(df_whr[c("score")])
# 2-1
summary(df_whr[c("Score")])
# 2-1
library(psych)
describe(df_whr[c("Score")])
# 2-2
m_score<-mean(Score)
sd_score<-sd(Score)
df_whr2 <- subset(df_whr, Score > (m_score-sd_score) & Score < (m_score + sd_score))
summary(df_whr2)
df_whr2 <- subset(df_whr, Score >= (m_score-sd_score) & Score =< (m_score + sd_score))
summary(df_whr2)
# 2-3
summary(df_whr[c("Score")])
subset(df_whr, Score==7.769)
heart <- read.csv("heart.csv")
attach(heart)
summary(heart)
View(heart)
View(whr100)
heart <- read.csv("heart.csv")
summary(heart)
heart <- read.csv("heart.csv")
attach(heart)
summary(heart)
# 3-1
hist(age)
# 3-1
hist(age, breaks = 10)
# 3-1
hist(age, break = 10)
# 3-1
hist(age, breaks = 10, col = 'lightblue')
# 3-2
boxplot(x=target, y=thalach)
# 3-2
boxplot(thalach~target, boxwex=0.5, col=c("lightblue", "coral"))
# 4. t-test
# 4-1
library(ggplot2)
heart$sex <- as.factor(heart$sex)
summary(heart)
heart$target <- as.factor(heart$target)
summary(heart)
ggplot(data=heart, aes(sex))+
geom_bar(aes(fill=target))
t.test(target~sex, data=heart)
attach(heart)
t.test(target~sex, data=heart)
heart$sex <- as.numeric(heart$sex)
heart$target <- as.numeric(heart$target)
t.test(target~sex, data=heart)
ggplot(data=heart, aes(factor(sex)))+
geom_bar(aes(fill=factor(target)))
ggplot(data=heart, aes(sex))+
geom_bar(aes(fill=target))
ggplot(data=heart, aes(factor(sex)))+
geom_bar(aes(fill=factor(target)))
View(heart)
heart <- read.csv("heart.csv")
attach(heart)
summary(heart)
ggplot(data=heart, aes(factor(sex)))+
geom_bar(aes(fill=factor(target)))
t.test(target~sex, data=heart)
(df_whr[c("Score")])
max(df_whr[c("Score")])
min(df_whr[c("Score")])
# 모범답
max(Score - 6.07)
df_whr[which.max(Score - 6.07)]
df_whr[which.max(Score - 6.07)]
which.max(Score - 6.07)
which.max(Score - 6.07)
df_whr[1]
# 3-1 50대
hist(age, breaks = 10, col = 'lightblue')
# 3-2
boxplot(thalach~target, boxwex=0.5, col=c("lightblue", "coral"))
ggplot(data=heart, aes(factor(sex)))+
geom_bar(aes(fill=factor(target)))
df_whr[1][1]
df_whr[1,1]
df_whr[1,which.max(Score - 6.07)]
# 2-3 Finland
max(df_whr[c("Score")])
min(df_whr[c("Score")])
subset(df_whr, Score==7.769)
# 모범답
df_whr[1,which.max(abs(Score - 6.07))]
